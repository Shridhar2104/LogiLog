// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: shopify.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopifyService_SyncOrders_FullMethodName                 = "/pb.ShopifyService/SyncOrders"
	ShopifyService_StoreToken_FullMethodName                 = "/pb.ShopifyService/StoreToken"
	ShopifyService_GetOrdersForShopAndAccount_FullMethodName = "/pb.ShopifyService/GetOrdersForShopAndAccount"
	ShopifyService_UpdateOrder_FullMethodName                = "/pb.ShopifyService/UpdateOrder"
	ShopifyService_CalculateShippingRates_FullMethodName     = "/pb.ShopifyService/CalculateShippingRates"
	ShopifyService_GetShipmentDetails_FullMethodName         = "/pb.ShopifyService/GetShipmentDetails"
	ShopifyService_CreateShipment_FullMethodName             = "/pb.ShopifyService/CreateShipment"
	ShopifyService_ShipmentGraphql_FullMethodName            = "/pb.ShopifyService/ShipmentGraphql"
)

// ShopifyServiceClient is the client API for ShopifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopifyServiceClient interface {
	SyncOrders(ctx context.Context, in *SyncOrdersRequest, opts ...grpc.CallOption) (*SyncOrdersResponse, error)
	StoreToken(ctx context.Context, in *StoreTokenRequest, opts ...grpc.CallOption) (*StoreTokenResponse, error)
	GetOrdersForShopAndAccount(ctx context.Context, in *GetOrdersForShopAndAccountRequest, opts ...grpc.CallOption) (*GetOrdersForShopAndAccountResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
	CalculateShippingRates(ctx context.Context, in *CalculateShippingRatesRequest, opts ...grpc.CallOption) (*CalculateShippingRatesResponse, error)
	GetShipmentDetails(ctx context.Context, in *GetShipmentDetailsRequest, opts ...grpc.CallOption) (*GetShipmentDetailsResponse, error)
	CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*CreateShipmentResponse, error)
	ShipmentGraphql(ctx context.Context, in *ShipmentGraphqlRequest, opts ...grpc.CallOption) (*ShipmentGraphqlResponse, error)
}

type shopifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopifyServiceClient(cc grpc.ClientConnInterface) ShopifyServiceClient {
	return &shopifyServiceClient{cc}
}

func (c *shopifyServiceClient) SyncOrders(ctx context.Context, in *SyncOrdersRequest, opts ...grpc.CallOption) (*SyncOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncOrdersResponse)
	err := c.cc.Invoke(ctx, ShopifyService_SyncOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) StoreToken(ctx context.Context, in *StoreTokenRequest, opts ...grpc.CallOption) (*StoreTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreTokenResponse)
	err := c.cc.Invoke(ctx, ShopifyService_StoreToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) GetOrdersForShopAndAccount(ctx context.Context, in *GetOrdersForShopAndAccountRequest, opts ...grpc.CallOption) (*GetOrdersForShopAndAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersForShopAndAccountResponse)
	err := c.cc.Invoke(ctx, ShopifyService_GetOrdersForShopAndAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderResponse)
	err := c.cc.Invoke(ctx, ShopifyService_UpdateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) CalculateShippingRates(ctx context.Context, in *CalculateShippingRatesRequest, opts ...grpc.CallOption) (*CalculateShippingRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateShippingRatesResponse)
	err := c.cc.Invoke(ctx, ShopifyService_CalculateShippingRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) GetShipmentDetails(ctx context.Context, in *GetShipmentDetailsRequest, opts ...grpc.CallOption) (*GetShipmentDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShipmentDetailsResponse)
	err := c.cc.Invoke(ctx, ShopifyService_GetShipmentDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*CreateShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShipmentResponse)
	err := c.cc.Invoke(ctx, ShopifyService_CreateShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopifyServiceClient) ShipmentGraphql(ctx context.Context, in *ShipmentGraphqlRequest, opts ...grpc.CallOption) (*ShipmentGraphqlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentGraphqlResponse)
	err := c.cc.Invoke(ctx, ShopifyService_ShipmentGraphql_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopifyServiceServer is the server API for ShopifyService service.
// All implementations must embed UnimplementedShopifyServiceServer
// for forward compatibility.
type ShopifyServiceServer interface {
	SyncOrders(context.Context, *SyncOrdersRequest) (*SyncOrdersResponse, error)
	StoreToken(context.Context, *StoreTokenRequest) (*StoreTokenResponse, error)
	GetOrdersForShopAndAccount(context.Context, *GetOrdersForShopAndAccountRequest) (*GetOrdersForShopAndAccountResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error)
	CalculateShippingRates(context.Context, *CalculateShippingRatesRequest) (*CalculateShippingRatesResponse, error)
	GetShipmentDetails(context.Context, *GetShipmentDetailsRequest) (*GetShipmentDetailsResponse, error)
	CreateShipment(context.Context, *CreateShipmentRequest) (*CreateShipmentResponse, error)
	ShipmentGraphql(context.Context, *ShipmentGraphqlRequest) (*ShipmentGraphqlResponse, error)
	mustEmbedUnimplementedShopifyServiceServer()
}

// UnimplementedShopifyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopifyServiceServer struct{}

func (UnimplementedShopifyServiceServer) SyncOrders(context.Context, *SyncOrdersRequest) (*SyncOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncOrders not implemented")
}
func (UnimplementedShopifyServiceServer) StoreToken(context.Context, *StoreTokenRequest) (*StoreTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreToken not implemented")
}
func (UnimplementedShopifyServiceServer) GetOrdersForShopAndAccount(context.Context, *GetOrdersForShopAndAccountRequest) (*GetOrdersForShopAndAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForShopAndAccount not implemented")
}
func (UnimplementedShopifyServiceServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*UpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedShopifyServiceServer) CalculateShippingRates(context.Context, *CalculateShippingRatesRequest) (*CalculateShippingRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateShippingRates not implemented")
}
func (UnimplementedShopifyServiceServer) GetShipmentDetails(context.Context, *GetShipmentDetailsRequest) (*GetShipmentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentDetails not implemented")
}
func (UnimplementedShopifyServiceServer) CreateShipment(context.Context, *CreateShipmentRequest) (*CreateShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipment not implemented")
}
func (UnimplementedShopifyServiceServer) ShipmentGraphql(context.Context, *ShipmentGraphqlRequest) (*ShipmentGraphqlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipmentGraphql not implemented")
}
func (UnimplementedShopifyServiceServer) mustEmbedUnimplementedShopifyServiceServer() {}
func (UnimplementedShopifyServiceServer) testEmbeddedByValue()                        {}

// UnsafeShopifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopifyServiceServer will
// result in compilation errors.
type UnsafeShopifyServiceServer interface {
	mustEmbedUnimplementedShopifyServiceServer()
}

func RegisterShopifyServiceServer(s grpc.ServiceRegistrar, srv ShopifyServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopifyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopifyService_ServiceDesc, srv)
}

func _ShopifyService_SyncOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).SyncOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_SyncOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).SyncOrders(ctx, req.(*SyncOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_StoreToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).StoreToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_StoreToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).StoreToken(ctx, req.(*StoreTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_GetOrdersForShopAndAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersForShopAndAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).GetOrdersForShopAndAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_GetOrdersForShopAndAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).GetOrdersForShopAndAccount(ctx, req.(*GetOrdersForShopAndAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_CalculateShippingRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateShippingRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).CalculateShippingRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_CalculateShippingRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).CalculateShippingRates(ctx, req.(*CalculateShippingRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_GetShipmentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).GetShipmentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_GetShipmentDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).GetShipmentDetails(ctx, req.(*GetShipmentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_CreateShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).CreateShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_CreateShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).CreateShipment(ctx, req.(*CreateShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopifyService_ShipmentGraphql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentGraphqlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopifyServiceServer).ShipmentGraphql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopifyService_ShipmentGraphql_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopifyServiceServer).ShipmentGraphql(ctx, req.(*ShipmentGraphqlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopifyService_ServiceDesc is the grpc.ServiceDesc for ShopifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShopifyService",
	HandlerType: (*ShopifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncOrders",
			Handler:    _ShopifyService_SyncOrders_Handler,
		},
		{
			MethodName: "StoreToken",
			Handler:    _ShopifyService_StoreToken_Handler,
		},
		{
			MethodName: "GetOrdersForShopAndAccount",
			Handler:    _ShopifyService_GetOrdersForShopAndAccount_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _ShopifyService_UpdateOrder_Handler,
		},
		{
			MethodName: "CalculateShippingRates",
			Handler:    _ShopifyService_CalculateShippingRates_Handler,
		},
		{
			MethodName: "GetShipmentDetails",
			Handler:    _ShopifyService_GetShipmentDetails_Handler,
		},
		{
			MethodName: "CreateShipment",
			Handler:    _ShopifyService_CreateShipment_Handler,
		},
		{
			MethodName: "ShipmentGraphql",
			Handler:    _ShopifyService_ShipmentGraphql_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopify.proto",
}
